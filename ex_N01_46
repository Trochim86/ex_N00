""" class car """
class Car:  # tym razem bez nawiasów

    def __init__(self, make, model, year):
        """Initialize attributes to describe a car."""
        self.make = make
        self.model = model
        self.year = year
        self.odometer_reading = 0

    def get_descriptive_name(self):
    #Return a neatly formatted descriptive name

        long_name = f"{self.year} {self.make} {self.model}"
        return long_name

    def read_odometer(self):
        print(f"This car has {self.odometer_reading} miles on it .")

    def up_data(self, mileage):
        if mileage >= self.odometer_reading: # nie zapominamy o dodaniu self.
            self.odometer_reading = mileage # dodajemy kolejna obiekt do klasy 
        else:
            print("Stop you can't roll back odometer")


    def increment_odometer(self, miles):
        self.odometer_reading += miles
    
""" Create a childern class"""

class Elecar(Car): # w nawias wstawiamy klase rodzica
    def __init__(self, make, model, year):
        super().__init__(make, model, year)
        self.battery = Battery()
        """ dodajemy nowy obiekt do subklasy"""

        self.battery_size =75 # dodano nowy obiekt 

    

class Battery:
    def __init__(self, baterry_size = 175):
        self.batery_size = baterry_size

    def describe_battery(self):
        print(f"This car has a {self.batery_size} voult battery")


print("****"*8)
my_tesla = Elecar("tesla",'models',2020)
print(my_tesla.get_descriptive_name())
my_tesla.battery.describe_battery()

print("****"*8)
my_used_car = Car('Subaru', 'Outback', 2016)
print(my_used_car.get_descriptive_name())
my_used_car.up_data(29899)
my_used_car.read_odometer()

my_used_car.increment_odometer(100)
my_used_car.read_odometer()

new_car = Car('audi', 'a4', 2020)    
print(new_car.get_descriptive_name())

new_car.up_data(23) # nową wartość wstawiamy w nawiasy 

new_car.read_odometer()
